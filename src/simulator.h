
#ifndef _SRC_SIMULATOR_H_
#define _SRC_SIMULATOR_H_

#include <memory>
#include <queue>
#include <chrono>
#include <random>
#include <algorithm>

#include "network.h"
#include "events.h"
#include "macros.h"
#include "types.h"

// Forward declarations
class Event;

using NetworkParams = Network::NetworkParams;

class Simulator : public std::enable_shared_from_this<Simulator>
{
public:
   typedef std::shared_ptr<Simulator> Ptr;

   struct SimulationParams
   {

      std::shared_ptr<NetworkParams> network_params;

      // Mean of the exponential distribution from which interarrival time between
      // transactions generated by any peer is sampled
      double Ttx;

      // Used to compute the mean of the exponential distribution to sample
      // d_ij
      double Tdij;

      double blocks_interarrival;

      // simulation has to end after total #blocks reached this limit
      int max_blocks;
   };

   Simulator(std::shared_ptr<SimulationParams> params);

   DISALLOW_COPY_AND_ASSIGN(Simulator)

   static Ptr CreatePtr(std::shared_ptr<SimulationParams> params);

   // Schedule an event to be processed after a delay
   void Schedule(EventPtr event, double delay = 0.0);

   // Process the next scheduled event
   // returns true if there is an event to be processed
   bool Step();

   // Run the simulation until no scheduled events are left.
   void Run();

   // Simulator environment
private:
   std::shared_ptr<SimulationParams> params_;
   NetworkPtr network_;

   // Simulation variables
private:
   class QueuedEvent
   {
   public:
      double time;
      EventPtr event;

      QueuedEvent(double time, EventPtr event);

      bool operator<(const QueuedEvent &other) const;
   };

   double now_ = 0.0;

   // Is set when the simulation has reached its end (by the max_blocks limit)
   bool is_over_ = false;
   std::priority_queue<QueuedEvent> queued_events_;

public:
   static std::mt19937_64 rng;
};

#endif // _SRC_SIMULATOR_H_