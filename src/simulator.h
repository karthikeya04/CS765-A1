
#ifndef _SRC_SIMULATOR_H_
#define _SRC_SIMULATOR_H_

#include <memory>
#include <queue>
#include <chrono>
#include <random>
#include <algorithm>

#include "network.h"
#include "events.h"
#include "macros.h"

using SimTime = long double;

// Forward declarations
class Event;

class Simulator {
 public:
    typedef std::shared_ptr<Simulator> Ptr;
    typedef std::weak_ptr<Simulator> WeakPtr;

    struct SimulationParams {

        Network::NetworkParams network_params;
        
        // Mean of the exponential distribution from which interarrival time between 
        // transactions generated by any peer is sampled
        double Ttx;

        // Used to compute the mean of the exponential distribution to sample
        // d_ij
        double Tdij;

        double blocks_interarrival;

        // simulation has to end after total #blocks reached this limit
        uint32 max_blocks;        
    };

    Simulator(std::shared_ptr<SimulationParams> params);

    Ptr CreatePtr(std::shared_ptr<SimulationParams> params);

    // Schedule an event to be processed after a delay
    void Schedule(Event::Ptr event, SimTime delay = 0.0);

    // Process the next scheduled event
    // returns true if there is an event to be processed
    bool Step();

    // Run the simulation until no scheduled events are left.
    void Run();

    // Simulator environment
 private:
    std::shared_ptr<SimulationParams> params_;
    Network::Ptr network_;

    // Simulation variables
 private:
    class QueuedEvent {
     public:
        SimTime time;
        Event::Ptr event;

        QueuedEvent(SimTime time, Event::Ptr event);

        bool operator<(const QueuedEvent &other) const;
    };

    SimTime now_ = 0.0;

    // Is set when the simulation has reached its end (by the max_blocks limit)
    bool is_over_ = false;
    std::priority_queue<QueuedEvent> queued_events_;

 private:
    static std::mt19937_64 rng;

 private:
    DISALLOW_COPY_AND_ASSIGN(Simulator)
};


#endif // _SRC_SIMULATOR_H_